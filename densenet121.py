# -*- coding: utf-8 -*-
"""DenseNet121.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UIU2J78ieleBAlv1MelAS9xpBm3Zzsmz
"""

import tensorflow as tf
from tensorflow.keras import layers, models, regularizers

def dense_block(x, num_layers, growth_rate, name):
    for i in range(num_layers):
        cb = conv_block(x, growth_rate, name=name + '_block' + str(i + 1))
        x = layers.Concatenate(axis=-1, name=name + '_concat' + str(i + 1))([x, cb])
    return x

def transition_block(x, reduction, name):
    x = layers.BatchNormalization(epsilon=1.001e-5, name=name + '_bn')(x)
    x = layers.ReLU(name=name + '_relu')(x)
    x = layers.Conv2D(int(tf.keras.backend.int_shape(x)[-1] * reduction), 1, use_bias=False, name=name + '_conv')(x)
    x = layers.AveragePooling2D(2, strides=2, name=name + '_pool')(x)
    return x

def conv_block(x, growth_rate, name):
    x = layers.BatchNormalization(epsilon=1.001e-5, name=name + '_0_bn')(x)
    x = layers.ReLU(name=name + '_0_relu')(x)
    x = layers.Conv2D(4 * growth_rate, 1, use_bias=False, name=name + '_1_conv')(x)
    x = layers.BatchNormalization(epsilon=1.001e-5, name=name + '_1_bn')(x)
    x = layers.ReLU(name=name + '_1_relu')(x)
    x = layers.Conv2D(growth_rate, 3, padding='same', use_bias=False, name=name + '_2_conv')(x)
    return x

def create_densenet121(input_shape, num_classes):
    inputs = tf.keras.Input(shape=input_shape)

    x = layers.ZeroPadding2D(padding=((3, 3), (3, 3)))(inputs)
    # Change the layer name here to remove the '/' character
    x = layers.Conv2D(64, 7, strides=2, use_bias=False, name='conv1_conv')(x)
    x = layers.BatchNormalization(epsilon=1.001e-5, name='conv1_bn')(x)
    x = layers.ReLU(name='conv1_relu')(x)
    x = layers.ZeroPadding2D(padding=((1, 1), (1, 1)))(x)
    x = layers.MaxPooling2D(3, strides=2, name='pool1')(x)

    x = dense_block(x, 6, 32, name='conv2')
    x = transition_block(x, 0.5, name='pool2')
    x = dense_block(x, 12, 32, name='conv3')
    x = transition_block(x, 0.5, name='pool3')
    x = dense_block(x, 24, 32, name='conv4')
    x = transition_block(x, 0.5, name='pool4')
    x = dense_block(x, 16, 32, name='conv5')

    x = layers.BatchNormalization(epsilon=1.001e-5, name='bn')(x)
    x = layers.ReLU(name='relu')(x)
    x = layers.GlobalAveragePooling2D(name='avg_pool')(x)
    outputs = layers.Dense(num_classes, activation='softmax', name='predictions')(x)

    model = models.Model(inputs, outputs)
    return model

# Define input shape and number of classes
input_shape = (256, 256, 3)
num_classes = 7 # Change this to match the number of classes in your dataset
# Create the model
model = create_densenet121(input_shape, num_classes)
# Print model summary
model.summary()